/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class BSTIterator {
private:
    int i=0;
    int len=0;
    int *arr;
    
    int size_Tree(TreeNode* root)
    {
        if(!root)
            return 0;
        return 1 + size_Tree(root->left) + size_Tree(root->right);
    }
    
    void fill_arr(int *arr,TreeNode *root)
    {
        if(!root)
            return;
        fill_arr(arr, root->left);
        arr[i++]=root->val;
        fill_arr(arr, root->right);
    }
public:
    BSTIterator(TreeNode* root) {
        len=size_Tree(root);
        arr =(int*) malloc(4*len);
        fill_arr(arr, root);
        i = 0;
    }
    
    int next() {
        return arr[i++];
    }
    
    bool hasNext() {
        return i!=len;
    }
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */